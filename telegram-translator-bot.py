import os
import logging
from io import BytesIO

import pytesseract
from googletrans import Translator
from PIL import Image

from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
# –¢–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω –æ—Ç Telegram
# –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑: export TELEGRAM_TOKEN="–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –õ–û–ì–ò–ö–ê –ü–ï–†–ï–í–û–î–ê –ò –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø ---

def translate_text(text: str, dest_lang: str = 'ru') -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Google Translate.
    """
    if not text or not text.strip():
        return "–ù–µ—á–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å."
    try:
        translator = Translator()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º
        detected = translator.detect(text)
        translation = translator.translate(text, dest=dest_lang, src=detected.lang)
        return translation.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–µ—Ä–µ–≤–æ–¥–∞."

def ocr_and_translate_image(image: Image.Image) -> str:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é Tesseract –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ.
    """
    try:
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫–∏
        extracted_text = pytesseract.image_to_string(image, lang='rus+eng')

        if not extracted_text or not extracted_text.strip():
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        translated_text = translate_text(extracted_text)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª, –∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        return f"**–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n`{extracted_text.strip()}`\n\n**–ü–µ—Ä–µ–≤–æ–¥:**\n`{translated_text}`"

    except pytesseract.TesseractNotFoundError:
        logger.error("Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH.")
        return ("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ü—Ä–æ–≥—Ä–∞–º–º–∞ Tesseract OCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. "
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: sudo apt install tesseract-ocr")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_name = update.message.from_user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞ –±–∞–∑–µ Google Translate.\n\n"
        "‚û°Ô∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n\n"
        "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –µ–≥–æ –∏ —Ç–æ–∂–µ –ø–µ—Ä–µ–≤–µ–¥—É."
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."""
    user_text = update.message.text
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action='typing')

    translation = translate_text(user_text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
    await update.message.reply_text(translation, parse_mode='Markdown')

async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."""
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action='typing')

    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_stream = BytesIO()
        await photo_file.download_to_memory(photo_stream)
        photo_stream.seek(0)

        image = Image.open(photo_stream)
        
        ocr_result = ocr_and_translate_image(image)
        await update.message.reply_text(ocr_result, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# --- –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---

async def post_init(application: Application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞."""
    await application.bot.set_my_commands([
        BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TELEGRAM_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
